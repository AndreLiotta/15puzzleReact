{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Downloads\\\\15puzzleReact\\\\src\\\\App.js\";\nimport Board from \"./Board.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  function init() {\n    const game = [];\n    let temp;\n    const maxValue = 15;\n    // costruisco un array di valori Random\n    let arrayBool = [];\n    for (let i = 0; i < maxValue; i++) arrayBool.push(false);\n    for (let i = 0; i < maxValue; i++) {\n      temp = Math.trunc(Math.random() * maxValue + 1);\n      while (arrayBool[temp]) temp = Math.trunc(Math.random() * maxValue + 1);\n      arrayBool[temp] = true;\n      game[i] = temp;\n    }\n    // invoco la funzione init() finché non ottengo una sequenza utile\n    console.log(game);\n    if (isSolvable(game)) {\n      game.push(null); // aggiungo il 16esimo valore null\n      return game;\n    } else init();\n  }\n\n  // verifico che la sequenza sia risolvibile\n  function isSolvable(game) {\n    let inversionCount = 0;\n    for (let i = 0; i < game.length - 1; i++) {\n      for (let j = i + 1; j < game.length; j++) {\n        if (game[i] > game[j]) inversionCount++;\n      }\n    }\n    if (inversionCount % 2 === 0) return true;else return false;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: \"0.5em\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: \"Serif\",\n        fontSize: \"24px\"\n      },\n      children: \"15 puzzle game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \"Click tiles to order\", /*#__PURE__*/_jsxDEV(Board, {\n      tiles: init()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","jsxDEV","_jsxDEV","App","init","game","temp","maxValue","arrayBool","i","push","Math","trunc","random","console","log","isSolvable","inversionCount","length","j","style","marginLeft","children","fontFamily","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["C:/Users/andre/Downloads/15puzzleReact/src/App.js"],"sourcesContent":["import Board from \"./Board.js\";\n\nfunction App() {\n  function init() {\n    const game = [];\n    let temp;\n    const maxValue = 15;\n    // costruisco un array di valori Random\n    let arrayBool = [];\n    for (let i = 0; i < maxValue; i++) arrayBool.push(false);\n    for (let i = 0; i < maxValue; i++) {\n      temp = Math.trunc(Math.random() * maxValue + 1);\n      while (arrayBool[temp])\n        temp = Math.trunc(Math.random() * maxValue + 1);\n      arrayBool[temp] = true;\n      game[i] = temp;\n    }\n    // invoco la funzione init() finché non ottengo una sequenza utile\n    console.log(game);\n    if (isSolvable(game)) {\n      game.push(null); // aggiungo il 16esimo valore null\n      return game;\n    } else init()\n  }\n\n  // verifico che la sequenza sia risolvibile\n  function isSolvable(game) {\n    let inversionCount = 0;\n    for (let i = 0; i < game.length - 1; i++) {\n      for (let j = i + 1; j < game.length; j++) {\n        if (game[i] > game[j]) inversionCount++;\n      }\n    }\n    if (inversionCount % 2 === 0) return true; else return false;\n  }\n\n  return (\n    <div style={{ marginLeft: \"0.5em\" }}>\n      <h1 style={{ fontFamily: \"Serif\", fontSize: \"24px\" }}>15 puzzle game</h1>\n      Click tiles to order\n      <Board tiles={init()} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAAA,EAAG;EACb,SAASC,IAAIA,CAAA,EAAG;IACd,MAAMC,IAAI,GAAG,EAAE;IACf,IAAIC,IAAI;IACR,MAAMC,QAAQ,GAAG,EAAE;IACnB;IACA,IAAIC,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAED,SAAS,CAACE,IAAI,CAAC,KAAK,CAAC;IACxD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjCH,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,QAAQ,GAAG,CAAC,CAAC;MAC/C,OAAOC,SAAS,CAACF,IAAI,CAAC,EACpBA,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,QAAQ,GAAG,CAAC,CAAC;MACjDC,SAAS,CAACF,IAAI,CAAC,GAAG,IAAI;MACtBD,IAAI,CAACI,CAAC,CAAC,GAAGH,IAAI;IAChB;IACA;IACAQ,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;IACjB,IAAIW,UAAU,CAACX,IAAI,CAAC,EAAE;MACpBA,IAAI,CAACK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB,OAAOL,IAAI;IACb,CAAC,MAAMD,IAAI,EAAE;EACf;;EAEA;EACA,SAASY,UAAUA,CAACX,IAAI,EAAE;IACxB,IAAIY,cAAc,GAAG,CAAC;IACtB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACa,MAAM,GAAG,CAAC,EAAET,CAAC,EAAE,EAAE;MACxC,KAAK,IAAIU,CAAC,GAAGV,CAAC,GAAG,CAAC,EAAEU,CAAC,GAAGd,IAAI,CAACa,MAAM,EAAEC,CAAC,EAAE,EAAE;QACxC,IAAId,IAAI,CAACI,CAAC,CAAC,GAAGJ,IAAI,CAACc,CAAC,CAAC,EAAEF,cAAc,EAAE;MACzC;IACF;IACA,IAAIA,cAAc,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,KAAM,OAAO,KAAK;EAC9D;EAEA,oBACEf,OAAA;IAAKkB,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBAClCpB,OAAA;MAAIkB,KAAK,EAAE;QAAEG,UAAU,EAAE,OAAO;QAAEC,QAAQ,EAAE;MAAO,CAAE;MAAAF,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,wBAEzE,eAAA1B,OAAA,CAACF,KAAK;MAAC6B,KAAK,EAAEzB,IAAI;IAAG;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACpB;AAEV;AAACE,EAAA,GAzCQ3B,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}