{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Downloads\\\\15puzzleReact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Board from \"./Board.js\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const game = [];\n  useEffect(() => {\n    init();\n  });\n  function init() {\n    let temp;\n    const maxValue = 15;\n    // costruisco un array di valori Random\n    let arrayBool = [];\n    for (let i = 0; i < maxValue; i++) arrayBool.push(false);\n    for (let i = 0; i < maxValue; i++) {\n      temp = Math.trunc(Math.random() * maxValue + 1);\n      while (arrayBool[temp]) temp = Math.trunc(Math.random() * maxValue + 1);\n      arrayBool[temp] = true;\n      game[i] = temp;\n    }\n    // invoco la funzione init() finché non ottengo una sequenza utile\n    console.log(game);\n    if (isSolvable(game)) {\n      game.push(null); // aggiungo il 16esimo valore null\n      return;\n    } else init();\n  }\n\n  // verifico che la sequenza sia risolvibile\n  function isSolvable(game) {\n    let inversionCount = 0;\n    for (let i = 0; i < game.length - 1; i++) {\n      for (let j = i + 1; j < game.length; j++) {\n        if (game[i] > game[j]) inversionCount++;\n      }\n    }\n    if (inversionCount % 2 === 0) return true;else return false;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: \"0.5em\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: \"Serif\",\n        fontSize: \"24px\"\n      },\n      children: \"15 puzzle game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \"Click tiles to order\", /*#__PURE__*/_jsxDEV(Board, {\n      tiles: game\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","useEffect","jsxDEV","_jsxDEV","App","_s","game","init","temp","maxValue","arrayBool","i","push","Math","trunc","random","console","log","isSolvable","inversionCount","length","j","style","marginLeft","children","fontFamily","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["C:/Users/andre/Downloads/15puzzleReact/src/App.js"],"sourcesContent":["import Board from \"./Board.js\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const game = [];\n\n  useEffect(() => {\n    init()\n  })\n  \n  function init() {\n    let temp;\n    const maxValue = 15;\n    // costruisco un array di valori Random\n    let arrayBool = [];\n    for (let i = 0; i < maxValue; i++) arrayBool.push(false);\n    for (let i = 0; i < maxValue; i++) {\n      temp = Math.trunc(Math.random() * maxValue + 1);\n      while (arrayBool[temp])\n        temp = Math.trunc(Math.random() * maxValue + 1);\n      arrayBool[temp] = true;\n      game[i] = temp;\n    }\n    // invoco la funzione init() finché non ottengo una sequenza utile\n    console.log(game);\n    if (isSolvable(game)) {\n      game.push(null); // aggiungo il 16esimo valore null\n      return\n    } else init();\n  }\n\n  // verifico che la sequenza sia risolvibile\n  function isSolvable(game) {\n    let inversionCount = 0;\n    for (let i = 0; i < game.length - 1; i++) {\n      for (let j = i + 1; j < game.length; j++) {\n        if (game[i] > game[j]) inversionCount++;\n      }\n    }\n    if (inversionCount % 2 === 0) return true; else return false;\n  }\n\n  return (\n    <div style={{ marginLeft: \"0.5em\" }}>\n      <h1 style={{ fontFamily: \"Serif\", fontSize: \"24px\" }}>15 puzzle game</h1>\n      Click tiles to order\n      <Board tiles={game} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,IAAI,GAAG,EAAE;EAEfL,SAAS,CAAC,MAAM;IACdM,IAAI,EAAE;EACR,CAAC,CAAC;EAEF,SAASA,IAAIA,CAAA,EAAG;IACd,IAAIC,IAAI;IACR,MAAMC,QAAQ,GAAG,EAAE;IACnB;IACA,IAAIC,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAED,SAAS,CAACE,IAAI,CAAC,KAAK,CAAC;IACxD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjCH,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,QAAQ,GAAG,CAAC,CAAC;MAC/C,OAAOC,SAAS,CAACF,IAAI,CAAC,EACpBA,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,QAAQ,GAAG,CAAC,CAAC;MACjDC,SAAS,CAACF,IAAI,CAAC,GAAG,IAAI;MACtBF,IAAI,CAACK,CAAC,CAAC,GAAGH,IAAI;IAChB;IACA;IACAQ,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;IACjB,IAAIY,UAAU,CAACZ,IAAI,CAAC,EAAE;MACpBA,IAAI,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB;IACF,CAAC,MAAML,IAAI,EAAE;EACf;;EAEA;EACA,SAASW,UAAUA,CAACZ,IAAI,EAAE;IACxB,IAAIa,cAAc,GAAG,CAAC;IACtB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACc,MAAM,GAAG,CAAC,EAAET,CAAC,EAAE,EAAE;MACxC,KAAK,IAAIU,CAAC,GAAGV,CAAC,GAAG,CAAC,EAAEU,CAAC,GAAGf,IAAI,CAACc,MAAM,EAAEC,CAAC,EAAE,EAAE;QACxC,IAAIf,IAAI,CAACK,CAAC,CAAC,GAAGL,IAAI,CAACe,CAAC,CAAC,EAAEF,cAAc,EAAE;MACzC;IACF;IACA,IAAIA,cAAc,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,KAAM,OAAO,KAAK;EAC9D;EAEA,oBACEhB,OAAA;IAAKmB,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBAClCrB,OAAA;MAAImB,KAAK,EAAE;QAAEG,UAAU,EAAE,OAAO;QAAEC,QAAQ,EAAE;MAAO,CAAE;MAAAF,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,wBAEzE,eAAA3B,OAAA,CAACH,KAAK;MAAC+B,KAAK,EAAEzB;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAClB;AAEV;AAACzB,EAAA,CA9CQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}