{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Downloads\\\\15puzzleReact\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Tile from \"./Tile\";\nimport styles from \"./Board.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n  const [clickedTile, setClickedTile] = useState(null);\n  const [tiles, setTiles] = useState(props.tiles);\n  const [moves, setMoves] = useState(0);\n  const [win, setWin] = useState(false);\n  useEffect(() => {\n    // Controllo se il tile può muoversi, scateno lo use effect ogni volta che cambia l'elemento cliccato,\n    // per gli spostamenti a destra e sinistra controllo tramite l'utilizzo del modulo la posizione\n    let array = [...tiles]; // Necessario fare una copia dell'array per cambiare il riferimento in modo\n    // che React colga il cambiamento, scambiando solo di posizione gli elementi dell'array React\n    // non cambierebbe la vista\n\n    if (array[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) + 1] === null &&\n    // controllo se l'elemento a dx di quello cliccato è vuoto\n    (clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) % 4 !== 3 // controllo che l'elemento cliccato non sia sull'ultima riga\n    ) {\n      array[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) + 1] = clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.value;\n      array[clickedTile.position] = null;\n    } else if (tiles[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) - 1] === null &&\n    // controllo se l'elemento a sx di quello cliccato è vuoto\n    (clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) % 4 !== 0 // controllo che l'elemento cliccato non sia sulla prima riga\n    ) {\n      array[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) - 1] = clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.value;\n      array[clickedTile.position] = null;\n    } else if (tiles[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) + 4] === null) {\n      // controllo se l'elemento sotto quello cliccato è quello vuoto\n      array[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) + 4] = clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.value;\n      array[clickedTile.position] = null;\n    } else if (tiles[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) - 4] === null) {\n      // controllo se l'elemento sopra quello cliccato è quello vuoto\n      array[(clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.position) - 4] = clickedTile === null || clickedTile === void 0 ? void 0 : clickedTile.value;\n      array[clickedTile.position] = null;\n    }\n    setTiles(array);\n    if (clickedTile !== null) {\n      let m = moves;\n      m = m + 1;\n      setMoves(m);\n    }\n  }, [clickedTile]); // dependecy su clikedTile, lo useEffect parte al primo render e a ogni cambiamento di clickedTile\n\n  useEffect(() => {\n    // useEffect utilizzato per vedere il giocatore ha vinto o no\n    let array = [...tiles];\n    if (array[array.length - 1] === null) {\n      array.pop(); // tolgo l'ultimo elemento nel caso sia null\n      setWin(isSorted(array));\n    } else {\n      setWin(false);\n    }\n  }, [tiles]); // dependecy su tiles, lo useEffect parte al primo render e ad ogni cambiamento di tiles\n\n  function isSorted(arr) {\n    // Funzione per vedere se l'array è ordinato, restituisce true se l'array è ordinato, false altrimenti\n    return arr.every(function (x, i) {\n      return i === 0 || x >= arr[i - 1]; // false se il precedente è più grande\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: win === true ? \"You win\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.border,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.table,\n        children: tiles !== null ? tiles.map((value, index) => /*#__PURE__*/_jsxDEV(Tile, {\n          value: value,\n          position: index,\n          clicked: () => setClickedTile({\n            position: index,\n            value: value\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)) : /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Trovando la sequenza risolvibile...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        marginTop: \"1em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: \"0\",\n          marginLeft: \"1em\"\n        },\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"DgdimUigT2/5jDcvYpK1IxYGH1k=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Tile","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","props","_s","clickedTile","setClickedTile","tiles","setTiles","moves","setMoves","win","setWin","array","position","value","m","length","pop","isSorted","arr","every","x","i","children","fileName","_jsxFileName","lineNumber","columnNumber","className","border","table","map","index","clicked","style","display","flexDirection","alignItems","marginTop","onClick","window","location","reload","margin","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/andre/Downloads/15puzzleReact/src/Board.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Tile from \"./Tile\";\nimport styles from \"./Board.module.css\"\n\nexport default function Board(props) {\n    const [clickedTile, setClickedTile] = useState(null);\n    const [tiles, setTiles] = useState(props.tiles);\n    const [moves, setMoves] = useState(0);\n    const [win, setWin] = useState(false);\n\n    useEffect(() => {\n        // Controllo se il tile può muoversi, scateno lo use effect ogni volta che cambia l'elemento cliccato,\n        // per gli spostamenti a destra e sinistra controllo tramite l'utilizzo del modulo la posizione\n        let array = [...tiles]; // Necessario fare una copia dell'array per cambiare il riferimento in modo\n        // che React colga il cambiamento, scambiando solo di posizione gli elementi dell'array React\n        // non cambierebbe la vista\n\n        if (\n            array[clickedTile?.position + 1] === null && // controllo se l'elemento a dx di quello cliccato è vuoto\n            clickedTile?.position % 4 !== 3 // controllo che l'elemento cliccato non sia sull'ultima riga\n        ) {\n            array[clickedTile?.position + 1] = clickedTile?.value;\n            array[clickedTile.position] = null;\n        } else if (\n            tiles[clickedTile?.position - 1] === null && // controllo se l'elemento a sx di quello cliccato è vuoto\n            clickedTile?.position % 4 !== 0 // controllo che l'elemento cliccato non sia sulla prima riga\n        ) {\n            array[clickedTile?.position - 1] = clickedTile?.value;\n            array[clickedTile.position] = null;\n        } else if (tiles[clickedTile?.position + 4] === null) {\n            // controllo se l'elemento sotto quello cliccato è quello vuoto\n            array[clickedTile?.position + 4] = clickedTile?.value;\n            array[clickedTile.position] = null;\n        } else if (tiles[clickedTile?.position - 4] === null) {\n            // controllo se l'elemento sopra quello cliccato è quello vuoto\n            array[clickedTile?.position - 4] = clickedTile?.value;\n            array[clickedTile.position] = null;\n        }\n        setTiles(array);\n        if (clickedTile !== null) {\n            let m = moves;\n            m = m + 1;\n            setMoves(m);\n        }\n    }, [clickedTile]); // dependecy su clikedTile, lo useEffect parte al primo render e a ogni cambiamento di clickedTile\n\n    useEffect(() => { // useEffect utilizzato per vedere il giocatore ha vinto o no\n        let array = [...tiles];\n        if (array[array.length - 1] === null) {\n            array.pop(); // tolgo l'ultimo elemento nel caso sia null\n            setWin(isSorted(array));\n        } else {\n            setWin(false)\n        }\n    }, [tiles]); // dependecy su tiles, lo useEffect parte al primo render e ad ogni cambiamento di tiles\n\n    function isSorted(arr) { // Funzione per vedere se l'array è ordinato, restituisce true se l'array è ordinato, false altrimenti\n        return arr.every(function (x, i) {\n            return i === 0 || x >= arr[i - 1]; // false se il precedente è più grande\n        });\n    }\n\n    return (\n        <>\n            <h2>{win === true ? \"You win\" : \"\"}</h2>\n            <div className={styles.border}>\n                <div className={styles.table}>\n                    {tiles !== null ? tiles.map((value, index) => (\n                        <Tile\n                            value={value}\n                            position={index}\n                            key={index}\n                            clicked={() => setClickedTile({ position: index, value: value })}\n                        ></Tile>\n                    )) : <h1>Trovando la sequenza risolvibile...</h1>}\n                </div>\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                    marginTop: \"1em\",\n                }}\n            >\n                <button onClick={() => window.location.reload()}>New Game</button>\n                <p style={{ margin: \"0\", marginLeft: \"1em\" }}>Moves: {moves}</p>\n            </div>\n        </>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}