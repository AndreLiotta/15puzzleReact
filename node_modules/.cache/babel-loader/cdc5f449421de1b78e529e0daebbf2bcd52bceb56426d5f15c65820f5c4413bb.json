{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Downloads\\\\15puzzleReact\\\\src\\\\App.js\";\nimport Board from \"./Board.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const game = [];\n  function init() {\n    let temp;\n    const maxValue = 15;\n    // costruisco un array di valori Random\n    let arrayBool = [];\n    for (let i = 0; i < maxValue; i++) arrayBool.push(false);\n    for (let i = 0; i < maxValue; i++) {\n      temp = Math.trunc(Math.random() * maxValue + 1);\n      while (arrayBool[temp]) temp = Math.trunc(Math.random() * maxValue + 1);\n      arrayBool[temp] = true;\n      game[i] = temp;\n    }\n    // invoco la funzione init() finché non ottengo una sequenza utile\n    console.log(game);\n    if (isSolvable(game)) {\n      game.push(null); // aggiungo il 16esimo valore null\n      // return game;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"0.5em\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            fontFamily: \"Serif\",\n            fontSize: \"24px\"\n          },\n          children: \"15 puzzle game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), \"Click tiles to order\", /*#__PURE__*/_jsxDEV(Board, {\n          tiles: game\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this);\n    } else init();\n  }\n\n  // verifico che la sequenza sia risolvibile\n  function isSolvable(game) {\n    let inversionCount = 0;\n    for (let i = 0; i < game.length - 1; i++) {\n      for (let j = i + 1; j < game.length; j++) {\n        if (game[i] > game[j]) inversionCount++;\n      }\n    }\n    if (inversionCount % 2 === 0) return true;else return false;\n  }\n  return init();\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","jsxDEV","_jsxDEV","App","game","init","temp","maxValue","arrayBool","i","push","Math","trunc","random","console","log","isSolvable","style","marginLeft","children","fontFamily","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","tiles","inversionCount","length","j","_c","$RefreshReg$"],"sources":["C:/Users/andre/Downloads/15puzzleReact/src/App.js"],"sourcesContent":["import Board from \"./Board.js\";\n\nfunction App() {\n  const game = [];\n  function init() {\n    let temp;\n    const maxValue = 15;\n    // costruisco un array di valori Random\n    let arrayBool = [];\n    for (let i = 0; i < maxValue; i++) arrayBool.push(false);\n    for (let i = 0; i < maxValue; i++) {\n      temp = Math.trunc(Math.random() * maxValue + 1);\n      while (arrayBool[temp])\n        temp = Math.trunc(Math.random() * maxValue + 1);\n      arrayBool[temp] = true;\n      game[i] = temp;\n    }\n    // invoco la funzione init() finché non ottengo una sequenza utile\n    console.log(game);\n    if (isSolvable(game)) {\n      game.push(null); // aggiungo il 16esimo valore null\n      // return game;\n      return (\n        <div style={{ marginLeft: \"0.5em\" }}>\n          <h1 style={{ fontFamily: \"Serif\", fontSize: \"24px\" }}>15 puzzle game</h1>\n          Click tiles to order\n          <Board tiles={game} />\n        </div>\n      );\n    } else init();\n  }\n\n  // verifico che la sequenza sia risolvibile\n  function isSolvable(game) {\n    let inversionCount = 0;\n    for (let i = 0; i < game.length - 1; i++) {\n      for (let j = i + 1; j < game.length; j++) {\n        if (game[i] > game[j]) inversionCount++;\n      }\n    }\n    if (inversionCount % 2 === 0) return true; else return false;\n  }\n\n  return (init())\n\n\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,IAAI,GAAG,EAAE;EACf,SAASC,IAAIA,CAAA,EAAG;IACd,IAAIC,IAAI;IACR,MAAMC,QAAQ,GAAG,EAAE;IACnB;IACA,IAAIC,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAED,SAAS,CAACE,IAAI,CAAC,KAAK,CAAC;IACxD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjCH,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,QAAQ,GAAG,CAAC,CAAC;MAC/C,OAAOC,SAAS,CAACF,IAAI,CAAC,EACpBA,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,QAAQ,GAAG,CAAC,CAAC;MACjDC,SAAS,CAACF,IAAI,CAAC,GAAG,IAAI;MACtBF,IAAI,CAACK,CAAC,CAAC,GAAGH,IAAI;IAChB;IACA;IACAQ,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;IACjB,IAAIY,UAAU,CAACZ,IAAI,CAAC,EAAE;MACpBA,IAAI,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB;MACA,oBACER,OAAA;QAAKe,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAQ,CAAE;QAAAC,QAAA,gBAClCjB,OAAA;UAAIe,KAAK,EAAE;YAAEG,UAAU,EAAE,OAAO;YAAEC,QAAQ,EAAE;UAAO,CAAE;UAAAF,QAAA,EAAC;QAAc;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,wBAEzE,eAAAvB,OAAA,CAACF,KAAK;UAAC0B,KAAK,EAAEtB;QAAK;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClB;IAEV,CAAC,MAAMpB,IAAI,EAAE;EACf;;EAEA;EACA,SAASW,UAAUA,CAACZ,IAAI,EAAE;IACxB,IAAIuB,cAAc,GAAG,CAAC;IACtB,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACwB,MAAM,GAAG,CAAC,EAAEnB,CAAC,EAAE,EAAE;MACxC,KAAK,IAAIoB,CAAC,GAAGpB,CAAC,GAAG,CAAC,EAAEoB,CAAC,GAAGzB,IAAI,CAACwB,MAAM,EAAEC,CAAC,EAAE,EAAE;QACxC,IAAIzB,IAAI,CAACK,CAAC,CAAC,GAAGL,IAAI,CAACyB,CAAC,CAAC,EAAEF,cAAc,EAAE;MACzC;IACF;IACA,IAAIA,cAAc,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,KAAM,OAAO,KAAK;EAC9D;EAEA,OAAQtB,IAAI,EAAE;AAGhB;AAACyB,EAAA,GA5CQ3B,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}